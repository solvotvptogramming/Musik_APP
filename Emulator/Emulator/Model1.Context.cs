//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Emulator
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Gimnazia1Entities : DbContext
    {
        public Gimnazia1Entities()
            : base("name=Gimnazia1Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AccessZone> AccessZone { get; set; }
        public virtual DbSet<AcessPoint> AcessPoint { get; set; }
        public virtual DbSet<adc> adc { get; set; }
        public virtual DbSet<ApplicationModifData> ApplicationModifData { get; set; }
        public virtual DbSet<Authorities> Authorities { get; set; }
        public virtual DbSet<BindingCommandScenarios> BindingCommandScenarios { get; set; }
        public virtual DbSet<BindingConditionStepScen> BindingConditionStepScen { get; set; }
        public virtual DbSet<BindingGrObjectsStepScen> BindingGrObjectsStepScen { get; set; }
        public virtual DbSet<BindingItemsDevScenarios> BindingItemsDevScenarios { get; set; }
        public virtual DbSet<BindingItemsScenarios> BindingItemsScenarios { get; set; }
        public virtual DbSet<BindingObjectsStepScen> BindingObjectsStepScen { get; set; }
        public virtual DbSet<CameraMatrix> CameraMatrix { get; set; }
        public virtual DbSet<Cameras> Cameras { get; set; }
        public virtual DbSet<ClientFieldsNames> ClientFieldsNames { get; set; }
        public virtual DbSet<ClientFieldsValues> ClientFieldsValues { get; set; }
        public virtual DbSet<CodesList> CodesList { get; set; }
        public virtual DbSet<ComPorts> ComPorts { get; set; }
        public virtual DbSet<Comps> Comps { get; set; }
        public virtual DbSet<CompTrns> CompTrns { get; set; }
        public virtual DbSet<ConditionStepScenarios> ConditionStepScenarios { get; set; }
        public virtual DbSet<ControlItems> ControlItems { get; set; }
        public virtual DbSet<Counters> Counters { get; set; }
        public virtual DbSet<DevCamerasItems> DevCamerasItems { get; set; }
        public virtual DbSet<DevElms> DevElms { get; set; }
        public virtual DbSet<devicemasterslave> devicemasterslave { get; set; }
        public virtual DbSet<DevItems> DevItems { get; set; }
        public virtual DbSet<drivers> drivers { get; set; }
        public virtual DbSet<drivers_comps> drivers_comps { get; set; }
        public virtual DbSet<dTypes> dTypes { get; set; }
        public virtual DbSet<dTypesElement> dTypesElement { get; set; }
        public virtual DbSet<DvsMass> DvsMass { get; set; }
        public virtual DbSet<ElementsTypesGroups> ElementsTypesGroups { get; set; }
        public virtual DbSet<EventGroup> EventGroup { get; set; }
        public virtual DbSet<EventGroupCont> EventGroupCont { get; set; }
        public virtual DbSet<EventOnModificationData> EventOnModificationData { get; set; }
        public virtual DbSet<Events> Events { get; set; }
        public virtual DbSet<EventsCategories> EventsCategories { get; set; }
        public virtual DbSet<EvReply> EvReply { get; set; }
        public virtual DbSet<GrAccess> GrAccess { get; set; }
        public virtual DbSet<GrObjCont> GrObjCont { get; set; }
        public virtual DbSet<GroupObj> GroupObj { get; set; }
        public virtual DbSet<Groups> Groups { get; set; }
        public virtual DbSet<GsmSettings> GsmSettings { get; set; }
        public virtual DbSet<GTime> GTime { get; set; }
        public virtual DbSet<Guest> Guest { get; set; }
        public virtual DbSet<Holidays> Holidays { get; set; }
        public virtual DbSet<interfaceprotocol> interfaceprotocol { get; set; }
        public virtual DbSet<interfaces> interfaces { get; set; }
        public virtual DbSet<ItemEvents> ItemEvents { get; set; }
        public virtual DbSet<KeyObjs> KeyObjs { get; set; }
        public virtual DbSet<Kone_AllAccessMask> Kone_AllAccessMask { get; set; }
        public virtual DbSet<Kone_COP> Kone_COP { get; set; }
        public virtual DbSet<Kone_CopAccess> Kone_CopAccess { get; set; }
        public virtual DbSet<Kone_COPGlobalDefaultAccessMask> Kone_COPGlobalDefaultAccessMask { get; set; }
        public virtual DbSet<Kone_COPSpecificMask> Kone_COPSpecificMask { get; set; }
        public virtual DbSet<Kone_DestinationAccessMask> Kone_DestinationAccessMask { get; set; }
        public virtual DbSet<Kone_DopAccess> Kone_DopAccess { get; set; }
        public virtual DbSet<Kone_DOPGlobalDefaultAccessMask> Kone_DOPGlobalDefaultAccessMask { get; set; }
        public virtual DbSet<Kone_DOPSpecificMask> Kone_DOPSpecificMask { get; set; }
        public virtual DbSet<Kone_KGS> Kone_KGS { get; set; }
        public virtual DbSet<LinesBroadcast> LinesBroadcast { get; set; }
        public virtual DbSet<list_comments> list_comments { get; set; }
        public virtual DbSet<ListComponents> ListComponents { get; set; }
        public virtual DbSet<logs> logs { get; set; }
        public virtual DbSet<logs_change_bd> logs_change_bd { get; set; }
        public virtual DbSet<m_alarm> m_alarm { get; set; }
        public virtual DbSet<Map_Elm> Map_Elm { get; set; }
        public virtual DbSet<map_indicators> map_indicators { get; set; }
        public virtual DbSet<MapElements> MapElements { get; set; }
        public virtual DbSet<MapElementsLinks> MapElementsLinks { get; set; }
        public virtual DbSet<MapElementsRegions> MapElementsRegions { get; set; }
        public virtual DbSet<MapIndicatorsDefault> MapIndicatorsDefault { get; set; }
        public virtual DbSet<MapInfoMarker> MapInfoMarker { get; set; }
        public virtual DbSet<MasterSlave> MasterSlave { get; set; }
        public virtual DbSet<NodeRepl> NodeRepl { get; set; }
        public virtual DbSet<orion_globalValues> orion_globalValues { get; set; }
        public virtual DbSet<pBioAccess> pBioAccess { get; set; }
        public virtual DbSet<pBioParams> pBioParams { get; set; }
        public virtual DbSet<pCar> pCar { get; set; }
        public virtual DbSet<PCompany> PCompany { get; set; }
        public virtual DbSet<PDivision> PDivision { get; set; }
        public virtual DbSet<PersonsPhotos> PersonsPhotos { get; set; }
        public virtual DbSet<pGroupExit> pGroupExit { get; set; }
        public virtual DbSet<phone_numbers> phone_numbers { get; set; }
        public virtual DbSet<pList> pList { get; set; }
        public virtual DbSet<pListNetPorts> pListNetPorts { get; set; }
        public virtual DbSet<pLogData> pLogData { get; set; }
        public virtual DbSet<pMaps> pMaps { get; set; }
        public virtual DbSet<pMark> pMark { get; set; }
        public virtual DbSet<pObjCont> pObjCont { get; set; }
        public virtual DbSet<pObjects> pObjects { get; set; }
        public virtual DbSet<PPost> PPost { get; set; }
        public virtual DbSet<PReason> PReason { get; set; }
        public virtual DbSet<ProFiles> ProFiles { get; set; }
        public virtual DbSet<PRooms> PRooms { get; set; }
        public virtual DbSet<protocoldevices> protocoldevices { get; set; }
        public virtual DbSet<protocols> protocols { get; set; }
        public virtual DbSet<QueryLog> QueryLog { get; set; }
        public virtual DbSet<RdrAccessPoint> RdrAccessPoint { get; set; }
        public virtual DbSet<Reasons> Reasons { get; set; }
        public virtual DbSet<ReferenceCommandScenarios> ReferenceCommandScenarios { get; set; }
        public virtual DbSet<ReferenceItemsScenarios> ReferenceItemsScenarios { get; set; }
        public virtual DbSet<ReferenceScenariosTypes> ReferenceScenariosTypes { get; set; }
        public virtual DbSet<ReferenceTactics> ReferenceTactics { get; set; }
        public virtual DbSet<RelatedCameras> RelatedCameras { get; set; }
        public virtual DbSet<relation_phone_id_dev> relation_phone_id_dev { get; set; }
        public virtual DbSet<RelationDiv> RelationDiv { get; set; }
        public virtual DbSet<RelationsListCar> RelationsListCar { get; set; }
        public virtual DbSet<RelProf> RelProf { get; set; }
        public virtual DbSet<RemoteControlCategories> RemoteControlCategories { get; set; }
        public virtual DbSet<RemoteControlCategoryToDTypesElement> RemoteControlCategoryToDTypesElement { get; set; }
        public virtual DbSet<ReservLine> ReservLine { get; set; }
        public virtual DbSet<RSLines> RSLines { get; set; }
        public virtual DbSet<ScanDoc> ScanDoc { get; set; }
        public virtual DbSet<ScenariosDevice> ScenariosDevice { get; set; }
        public virtual DbSet<ScenariosFilterDevice> ScenariosFilterDevice { get; set; }
        public virtual DbSet<Schedule> Schedule { get; set; }
        public virtual DbSet<Script> Script { get; set; }
        public virtual DbSet<Settings> Settings { get; set; }
        public virtual DbSet<Settings_group> Settings_group { get; set; }
        public virtual DbSet<Settings_Value> Settings_Value { get; set; }
        public virtual DbSet<SmsGatesParams> SmsGatesParams { get; set; }
        public virtual DbSet<SSLCertificate> SSLCertificate { get; set; }
        public virtual DbSet<states_item> states_item { get; set; }
        public virtual DbSet<Sys> Sys { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<SysGroup> SysGroup { get; set; }
        public virtual DbSet<SysParam> SysParam { get; set; }
        public virtual DbSet<SystemObjects> SystemObjects { get; set; }
        public virtual DbSet<TimeCont> TimeCont { get; set; }
        public virtual DbSet<TimeTable> TimeTable { get; set; }
        public virtual DbSet<tKBPenals> tKBPenals { get; set; }
        public virtual DbSet<tKBSections> tKBSections { get; set; }
        public virtual DbSet<tKeyBoxes> tKeyBoxes { get; set; }
        public virtual DbSet<tPersonalStuff> tPersonalStuff { get; set; }
        public virtual DbSet<tPStuffLogData> tPStuffLogData { get; set; }
        public virtual DbSet<tPStuffPhoto> tPStuffPhoto { get; set; }
        public virtual DbSet<TreeCtrl> TreeCtrl { get; set; }
        public virtual DbSet<TreeNode> TreeNode { get; set; }
        public virtual DbSet<tReferenceBook> tReferenceBook { get; set; }
        public virtual DbSet<TypeDocList> TypeDocList { get; set; }
        public virtual DbSet<TypeShlDevice> TypeShlDevice { get; set; }
        public virtual DbSet<ValueDevItemsScenarios> ValueDevItemsScenarios { get; set; }
        public virtual DbSet<ValueItemsScenarios> ValueItemsScenarios { get; set; }
        public virtual DbSet<VersionDB> VersionDB { get; set; }
        public virtual DbSet<VideoArchive> VideoArchive { get; set; }
        public virtual DbSet<VideoCamShots> VideoCamShots { get; set; }
        public virtual DbSet<VideoEvents> VideoEvents { get; set; }
        public virtual DbSet<VideoRecognizeAccessPoint> VideoRecognizeAccessPoint { get; set; }
        public virtual DbSet<VideoRecognizeChannels> VideoRecognizeChannels { get; set; }
        public virtual DbSet<VideoRecognizeProfiles> VideoRecognizeProfiles { get; set; }
        public virtual DbSet<vInsp> vInsp { get; set; }
        public virtual DbSet<vInspTypes> vInspTypes { get; set; }
        public virtual DbSet<weightcamera> weightcamera { get; set; }
        public virtual DbSet<WorkTimeZone> WorkTimeZone { get; set; }
        public virtual DbSet<Codes_T12> Codes_T12 { get; set; }
        public virtual DbSet<Kone_DOP> Kone_DOP { get; set; }
        public virtual DbSet<RSBioAccess> RSBioAccess { get; set; }
        public virtual DbSet<RSBioAccess2> RSBioAccess2 { get; set; }
        public virtual DbSet<RSBioParams> RSBioParams { get; set; }
        public virtual DbSet<FixVersionRsLine> FixVersionRsLine { get; set; }
        public virtual DbSet<v_ChangeLogForDB> v_ChangeLogForDB { get; set; }
    
        [DbFunction("Gimnazia1Entities", "fn_ClientObjectTypeToDbType")]
        public virtual IQueryable<fn_ClientObjectTypeToDbType_Result> fn_ClientObjectTypeToDbType(string clietnObjTypes, string delimeter)
        {
            var clietnObjTypesParameter = clietnObjTypes != null ?
                new ObjectParameter("ClietnObjTypes", clietnObjTypes) :
                new ObjectParameter("ClietnObjTypes", typeof(string));
    
            var delimeterParameter = delimeter != null ?
                new ObjectParameter("Delimeter", delimeter) :
                new ObjectParameter("Delimeter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_ClientObjectTypeToDbType_Result>("[Gimnazia1Entities].[fn_ClientObjectTypeToDbType](@ClietnObjTypes, @Delimeter)", clietnObjTypesParameter, delimeterParameter);
        }
    
        [DbFunction("Gimnazia1Entities", "fn_ParserStrToTable")]
        public virtual IQueryable<fn_ParserStrToTable_Result> fn_ParserStrToTable(string input_str, string delimeter)
        {
            var input_strParameter = input_str != null ?
                new ObjectParameter("input_str", input_str) :
                new ObjectParameter("input_str", typeof(string));
    
            var delimeterParameter = delimeter != null ?
                new ObjectParameter("delimeter", delimeter) :
                new ObjectParameter("delimeter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_ParserStrToTable_Result>("[Gimnazia1Entities].[fn_ParserStrToTable](@input_str, @delimeter)", input_strParameter, delimeterParameter);
        }
    
        [DbFunction("Gimnazia1Entities", "fn_SelectCamerasTreePlan")]
        public virtual IQueryable<fn_SelectCamerasTreePlan_Result> fn_SelectCamerasTreePlan(Nullable<int> iD_Comp, Nullable<int> gType, Nullable<bool> isMap, Nullable<int> iD_Object, Nullable<int> iD_Map)
        {
            var iD_CompParameter = iD_Comp.HasValue ?
                new ObjectParameter("ID_Comp", iD_Comp) :
                new ObjectParameter("ID_Comp", typeof(int));
    
            var gTypeParameter = gType.HasValue ?
                new ObjectParameter("GType", gType) :
                new ObjectParameter("GType", typeof(int));
    
            var isMapParameter = isMap.HasValue ?
                new ObjectParameter("isMap", isMap) :
                new ObjectParameter("isMap", typeof(bool));
    
            var iD_ObjectParameter = iD_Object.HasValue ?
                new ObjectParameter("ID_Object", iD_Object) :
                new ObjectParameter("ID_Object", typeof(int));
    
            var iD_MapParameter = iD_Map.HasValue ?
                new ObjectParameter("ID_Map", iD_Map) :
                new ObjectParameter("ID_Map", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_SelectCamerasTreePlan_Result>("[Gimnazia1Entities].[fn_SelectCamerasTreePlan](@ID_Comp, @GType, @isMap, @ID_Object, @ID_Map)", iD_CompParameter, gTypeParameter, isMapParameter, iD_ObjectParameter, iD_MapParameter);
        }
    
        [DbFunction("Gimnazia1Entities", "fn_SelectDevicesTreePlan")]
        public virtual IQueryable<fn_SelectDevicesTreePlan_Result> fn_SelectDevicesTreePlan(Nullable<int> iD_Comp, Nullable<int> gType, Nullable<bool> isMap, Nullable<int> iD_Object)
        {
            var iD_CompParameter = iD_Comp.HasValue ?
                new ObjectParameter("ID_Comp", iD_Comp) :
                new ObjectParameter("ID_Comp", typeof(int));
    
            var gTypeParameter = gType.HasValue ?
                new ObjectParameter("GType", gType) :
                new ObjectParameter("GType", typeof(int));
    
            var isMapParameter = isMap.HasValue ?
                new ObjectParameter("isMap", isMap) :
                new ObjectParameter("isMap", typeof(bool));
    
            var iD_ObjectParameter = iD_Object.HasValue ?
                new ObjectParameter("ID_Object", iD_Object) :
                new ObjectParameter("ID_Object", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_SelectDevicesTreePlan_Result>("[Gimnazia1Entities].[fn_SelectDevicesTreePlan](@ID_Comp, @GType, @isMap, @ID_Object)", iD_CompParameter, gTypeParameter, isMapParameter, iD_ObjectParameter);
        }
    
        [DbFunction("Gimnazia1Entities", "fn_SelectDoorsTreePlan")]
        public virtual IQueryable<fn_SelectDoorsTreePlan_Result> fn_SelectDoorsTreePlan(Nullable<int> iD_Comp, Nullable<int> gType, Nullable<bool> isMap)
        {
            var iD_CompParameter = iD_Comp.HasValue ?
                new ObjectParameter("ID_Comp", iD_Comp) :
                new ObjectParameter("ID_Comp", typeof(int));
    
            var gTypeParameter = gType.HasValue ?
                new ObjectParameter("GType", gType) :
                new ObjectParameter("GType", typeof(int));
    
            var isMapParameter = isMap.HasValue ?
                new ObjectParameter("isMap", isMap) :
                new ObjectParameter("isMap", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_SelectDoorsTreePlan_Result>("[Gimnazia1Entities].[fn_SelectDoorsTreePlan](@ID_Comp, @GType, @isMap)", iD_CompParameter, gTypeParameter, isMapParameter);
        }
    
        [DbFunction("Gimnazia1Entities", "fn_SelectGroupObjectsTreePlan")]
        public virtual IQueryable<fn_SelectGroupObjectsTreePlan_Result> fn_SelectGroupObjectsTreePlan(Nullable<int> iD_Comp, Nullable<int> gType, Nullable<int> iD_Map, Nullable<bool> isMap)
        {
            var iD_CompParameter = iD_Comp.HasValue ?
                new ObjectParameter("ID_Comp", iD_Comp) :
                new ObjectParameter("ID_Comp", typeof(int));
    
            var gTypeParameter = gType.HasValue ?
                new ObjectParameter("GType", gType) :
                new ObjectParameter("GType", typeof(int));
    
            var iD_MapParameter = iD_Map.HasValue ?
                new ObjectParameter("ID_Map", iD_Map) :
                new ObjectParameter("ID_Map", typeof(int));
    
            var isMapParameter = isMap.HasValue ?
                new ObjectParameter("isMap", isMap) :
                new ObjectParameter("isMap", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_SelectGroupObjectsTreePlan_Result>("[Gimnazia1Entities].[fn_SelectGroupObjectsTreePlan](@ID_Comp, @GType, @ID_Map, @isMap)", iD_CompParameter, gTypeParameter, iD_MapParameter, isMapParameter);
        }
    
        [DbFunction("Gimnazia1Entities", "fn_SelectLinkTreePlan")]
        public virtual IQueryable<fn_SelectLinkTreePlan_Result> fn_SelectLinkTreePlan(Nullable<int> iD_Comp, Nullable<int> gType, Nullable<int> iD_Map, Nullable<bool> isMap)
        {
            var iD_CompParameter = iD_Comp.HasValue ?
                new ObjectParameter("ID_Comp", iD_Comp) :
                new ObjectParameter("ID_Comp", typeof(int));
    
            var gTypeParameter = gType.HasValue ?
                new ObjectParameter("GType", gType) :
                new ObjectParameter("GType", typeof(int));
    
            var iD_MapParameter = iD_Map.HasValue ?
                new ObjectParameter("ID_Map", iD_Map) :
                new ObjectParameter("ID_Map", typeof(int));
    
            var isMapParameter = isMap.HasValue ?
                new ObjectParameter("isMap", isMap) :
                new ObjectParameter("isMap", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_SelectLinkTreePlan_Result>("[Gimnazia1Entities].[fn_SelectLinkTreePlan](@ID_Comp, @GType, @ID_Map, @isMap)", iD_CompParameter, gTypeParameter, iD_MapParameter, isMapParameter);
        }
    
        [DbFunction("Gimnazia1Entities", "fn_SelectMapElements")]
        public virtual IQueryable<fn_SelectMapElements_Result> fn_SelectMapElements(Nullable<int> iD_Map, Nullable<int> iD_Section, string gTypes)
        {
            var iD_MapParameter = iD_Map.HasValue ?
                new ObjectParameter("ID_Map", iD_Map) :
                new ObjectParameter("ID_Map", typeof(int));
    
            var iD_SectionParameter = iD_Section.HasValue ?
                new ObjectParameter("ID_Section", iD_Section) :
                new ObjectParameter("ID_Section", typeof(int));
    
            var gTypesParameter = gTypes != null ?
                new ObjectParameter("GTypes", gTypes) :
                new ObjectParameter("GTypes", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_SelectMapElements_Result>("[Gimnazia1Entities].[fn_SelectMapElements](@ID_Map, @ID_Section, @GTypes)", iD_MapParameter, iD_SectionParameter, gTypesParameter);
        }
    
        [DbFunction("Gimnazia1Entities", "fn_SelectMapIndicatorsDefault")]
        public virtual IQueryable<fn_SelectMapIndicatorsDefault_Result> fn_SelectMapIndicatorsDefault()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_SelectMapIndicatorsDefault_Result>("[Gimnazia1Entities].[fn_SelectMapIndicatorsDefault]()");
        }
    
        [DbFunction("Gimnazia1Entities", "fn_SelectObjectsTreePlan")]
        public virtual IQueryable<fn_SelectObjectsTreePlan_Result> fn_SelectObjectsTreePlan(Nullable<int> iD_Comp, Nullable<int> gType, Nullable<int> iD_Map, Nullable<bool> isMap)
        {
            var iD_CompParameter = iD_Comp.HasValue ?
                new ObjectParameter("ID_Comp", iD_Comp) :
                new ObjectParameter("ID_Comp", typeof(int));
    
            var gTypeParameter = gType.HasValue ?
                new ObjectParameter("GType", gType) :
                new ObjectParameter("GType", typeof(int));
    
            var iD_MapParameter = iD_Map.HasValue ?
                new ObjectParameter("ID_Map", iD_Map) :
                new ObjectParameter("ID_Map", typeof(int));
    
            var isMapParameter = isMap.HasValue ?
                new ObjectParameter("isMap", isMap) :
                new ObjectParameter("isMap", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_SelectObjectsTreePlan_Result>("[Gimnazia1Entities].[fn_SelectObjectsTreePlan](@ID_Comp, @GType, @ID_Map, @isMap)", iD_CompParameter, gTypeParameter, iD_MapParameter, isMapParameter);
        }
    
        [DbFunction("Gimnazia1Entities", "fn_SelectReadersTreePlan")]
        public virtual IQueryable<fn_SelectReadersTreePlan_Result> fn_SelectReadersTreePlan(Nullable<int> iD_Comp, Nullable<int> gType, Nullable<bool> isMap, Nullable<int> iD_Object)
        {
            var iD_CompParameter = iD_Comp.HasValue ?
                new ObjectParameter("ID_Comp", iD_Comp) :
                new ObjectParameter("ID_Comp", typeof(int));
    
            var gTypeParameter = gType.HasValue ?
                new ObjectParameter("GType", gType) :
                new ObjectParameter("GType", typeof(int));
    
            var isMapParameter = isMap.HasValue ?
                new ObjectParameter("isMap", isMap) :
                new ObjectParameter("isMap", typeof(bool));
    
            var iD_ObjectParameter = iD_Object.HasValue ?
                new ObjectParameter("ID_Object", iD_Object) :
                new ObjectParameter("ID_Object", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_SelectReadersTreePlan_Result>("[Gimnazia1Entities].[fn_SelectReadersTreePlan](@ID_Comp, @GType, @isMap, @ID_Object)", iD_CompParameter, gTypeParameter, isMapParameter, iD_ObjectParameter);
        }
    
        [DbFunction("Gimnazia1Entities", "fn_SelectScenarios")]
        public virtual IQueryable<fn_SelectScenarios_Result> fn_SelectScenarios()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_SelectScenarios_Result>("[Gimnazia1Entities].[fn_SelectScenarios]()");
        }
    
        [DbFunction("Gimnazia1Entities", "fn_SelectScenariosDevicesName")]
        public virtual IQueryable<fn_SelectScenariosDevicesName_Result> fn_SelectScenariosDevicesName(Nullable<int> deviceType, Nullable<bool> isScenarios)
        {
            var deviceTypeParameter = deviceType.HasValue ?
                new ObjectParameter("DeviceType", deviceType) :
                new ObjectParameter("DeviceType", typeof(int));
    
            var isScenariosParameter = isScenarios.HasValue ?
                new ObjectParameter("isScenarios", isScenarios) :
                new ObjectParameter("isScenarios", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_SelectScenariosDevicesName_Result>("[Gimnazia1Entities].[fn_SelectScenariosDevicesName](@DeviceType, @isScenarios)", deviceTypeParameter, isScenariosParameter);
        }
    
        [DbFunction("Gimnazia1Entities", "fn_SelectSectionInputTreePlan")]
        public virtual IQueryable<fn_SelectSectionInputTreePlan_Result> fn_SelectSectionInputTreePlan(Nullable<int> iD_Comp, Nullable<int> gType, Nullable<bool> isMap, Nullable<int> iD_Object)
        {
            var iD_CompParameter = iD_Comp.HasValue ?
                new ObjectParameter("ID_Comp", iD_Comp) :
                new ObjectParameter("ID_Comp", typeof(int));
    
            var gTypeParameter = gType.HasValue ?
                new ObjectParameter("GType", gType) :
                new ObjectParameter("GType", typeof(int));
    
            var isMapParameter = isMap.HasValue ?
                new ObjectParameter("isMap", isMap) :
                new ObjectParameter("isMap", typeof(bool));
    
            var iD_ObjectParameter = iD_Object.HasValue ?
                new ObjectParameter("ID_Object", iD_Object) :
                new ObjectParameter("ID_Object", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_SelectSectionInputTreePlan_Result>("[Gimnazia1Entities].[fn_SelectSectionInputTreePlan](@ID_Comp, @GType, @isMap, @ID_Object)", iD_CompParameter, gTypeParameter, isMapParameter, iD_ObjectParameter);
        }
    
        [DbFunction("Gimnazia1Entities", "fn_SelectSectionOutputTreePlan")]
        public virtual IQueryable<fn_SelectSectionOutputTreePlan_Result> fn_SelectSectionOutputTreePlan(Nullable<int> iD_Comp, Nullable<int> gType, Nullable<bool> isMap, Nullable<int> iD_Object)
        {
            var iD_CompParameter = iD_Comp.HasValue ?
                new ObjectParameter("ID_Comp", iD_Comp) :
                new ObjectParameter("ID_Comp", typeof(int));
    
            var gTypeParameter = gType.HasValue ?
                new ObjectParameter("GType", gType) :
                new ObjectParameter("GType", typeof(int));
    
            var isMapParameter = isMap.HasValue ?
                new ObjectParameter("isMap", isMap) :
                new ObjectParameter("isMap", typeof(bool));
    
            var iD_ObjectParameter = iD_Object.HasValue ?
                new ObjectParameter("ID_Object", iD_Object) :
                new ObjectParameter("ID_Object", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_SelectSectionOutputTreePlan_Result>("[Gimnazia1Entities].[fn_SelectSectionOutputTreePlan](@ID_Comp, @GType, @isMap, @ID_Object)", iD_CompParameter, gTypeParameter, isMapParameter, iD_ObjectParameter);
        }
    
        [DbFunction("Gimnazia1Entities", "fn_SelectZoneIndicatorsTreePlan")]
        public virtual IQueryable<fn_SelectZoneIndicatorsTreePlan_Result> fn_SelectZoneIndicatorsTreePlan(Nullable<int> iD_Map, Nullable<int> iD_Object)
        {
            var iD_MapParameter = iD_Map.HasValue ?
                new ObjectParameter("ID_Map", iD_Map) :
                new ObjectParameter("ID_Map", typeof(int));
    
            var iD_ObjectParameter = iD_Object.HasValue ?
                new ObjectParameter("ID_Object", iD_Object) :
                new ObjectParameter("ID_Object", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_SelectZoneIndicatorsTreePlan_Result>("[Gimnazia1Entities].[fn_SelectZoneIndicatorsTreePlan](@ID_Map, @ID_Object)", iD_MapParameter, iD_ObjectParameter);
        }
    
        [DbFunction("Gimnazia1Entities", "usfGetUnusedPenalList")]
        public virtual IQueryable<usfGetUnusedPenalList_Result> usfGetUnusedPenalList(Nullable<int> pListID)
        {
            var pListIDParameter = pListID.HasValue ?
                new ObjectParameter("PListID", pListID) :
                new ObjectParameter("PListID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<usfGetUnusedPenalList_Result>("[Gimnazia1Entities].[usfGetUnusedPenalList](@PListID)", pListIDParameter);
        }
    }
}
